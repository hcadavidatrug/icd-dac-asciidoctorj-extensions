/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rug.icdtools.interfacing.localcommands;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 *
 * @author hcadavid
 */
public class CommandRunner {

    private CommandRunner() {
    }
   
    
    
    private static class InputStreamStringBufferReader implements Runnable {

        private final BufferedReader input;
        private final StringBuffer output;        

        public InputStreamStringBufferReader(BufferedReader input, StringBuffer output) {
            this.input = input;
            this.output = output;
        }

        @Override
        public void run() {
            try {
                String line ;
                while ((line = input.readLine()) != null) {
                    output.append(line).append("\n");                    
                }
            } catch (IOException ex) {
                throw new RuntimeException("Error generated by command reception callback thread.", ex);
            }
        }

    }
    
    
    
    /**
     * 
     * @param command
     * @throws CommandGeneratedException if the command was successfully executed but returned an error code or an error message  
     * @throws CommandExecutionException if the command couldn't be executed 
     */
    public static void runCommand(String... command) throws CommandGeneratedException, CommandExecutionException {
        try{                        
            ProcessBuilder builder = new ProcessBuilder();
            builder.command(command);                  
            Process process = builder.start();

            final BufferedReader stderrReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));                
            final StringBuffer stderrText = new StringBuffer();

            InputStreamStringBufferReader errReading=new InputStreamStringBufferReader(stderrReader,stderrText);        
            Thread errReadingThread = new Thread(errReading);
            errReadingThread.start();  

            //wait the process, and stderr reader thread to finish
            int exitCode = process.waitFor();        
            errReadingThread.join();
            
            //In some commands, an output on stdin could also mean an error related to wrong arguments (i.e., showing parameters description)
            
            if (exitCode!=0){
                throw new CommandGeneratedException("Command ["+String.join(",",command)+"] returned an error code:"+exitCode+". Error message:"+stderrText.toString(),stderrText.toString());
            }
            if (!stderrText.toString().trim().equals("")) {
                throw new CommandGeneratedException("Command ["+String.join(",",command)+"] returned an error on STDERR:" + stderrText.toString(),stderrText.toString());
            }
        } catch (IOException e){
            throw new CommandExecutionException("Command ["+String.join(",",command)+"] failed due to an I/O error:"+e.getMessage(),e);
        } catch (InterruptedException e) {
            throw new CommandExecutionException("Command ["+String.join(",",command)+"] failed due to an unexpected thread-related error:"+e,e);            
        }
                
    }
    
    
    

    
}


